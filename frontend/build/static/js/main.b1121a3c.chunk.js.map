{"version":3,"sources":["serviceWorker.js","ChartsComponents/charts_options.jsx","ChartsComponents/charts_data.jsx","ChartsComponents/ChartsWrapper.js","api.js","views/Dashboard.jsx","index.js","routes.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","base_options","animation","duration","hover","animationDuration","responsiveAnimationDuration","maintainAspectRatio","legend","display","responsive","scales","yAxes","gridLines","drawBorder","color","zeroLineColor","ticks","padding","fontColor","xAxes","GetGraphOptions","type","line_color","tick","new_options","JSON","parse","stringify","DataWrapper","dataX","dataY","border_color","canvas","gradientStroke","getContext","createLinearGradient","addColorStop","labels","datasets","borderColor","pointRadius","lineTension","data","fill","minRotation","maxRotation","DoubleDataWrapper","dataCali","county","ctx","gradientStrokeCali","label","backgroundColor","borderWidth","borderDash","borderDashOffset","LineChart","react_default","a","createElement","CardBody","className","es","this","props","options","React","Component","getSensorData","_x","_getSensorData","apply","arguments","_callee","count","resp","json","regenerator_default","wrap","_context","prev","next","method","headers","Content-Type","fetch","sent","abrupt","stop","Dashboard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","last","pressureX","pressureY","flowX","flowY","volumeX","volumeY","setInterval","getSensor","slice","i","samples","times","push","humidity","temperature","pressure","setState","adjustArray","updateFlow","updateVolume","updatePressure","arr","length","shift","x","y","yVal","randomUniform","splice","Row","Col","xs","Card","CardHeader","sm","CardTitle","tag","ChartsWrapper_LineChart","ReactDOM","render","BrowserRouter","Switch","Route","path","component","document","getElementById","URL","process","href","origin","addEventListener","concat","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b1121a3c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Base Options\n\n\nlet base_options = {\n  animation: {\n    duration: 0 // general animation time\n  },\n  hover: {\n      animationDuration: 0 // duration of animations when hovering an item\n  },\n  responsiveAnimationDuration: 0, // animation duration after a resize\n  maintainAspectRatio: false,\n  legend: {\n    display: false\n  },\n  responsive: true,\n  scales: {\n    yAxes: [\n      {\n        gridLines: {\n          drawBorder: false,\n          color: null, // this changes\n          zeroLineColor: \"transparent\",\n          display: false\n        },\n        ticks: {\n          padding: 20,\n          fontColor: null //Font color\n        }\n      }\n    ],\n    xAxes: [\n      {\n        gridLines: {\n          drawBorder: false,\n          color: null, // Another Color\n          zeroLineColor: \"transparent\",\n          display: false\n        },\n        ticks: {\n          display: false\n        }\n      }\n    ]\n  }\n};\n\n// Passed in the color of the grid lines\nexport function GetGraphOptions(type, color) {\n  var line_color = null;\n  let tick = null;\n  if (color === \"green\") {\n    line_color = \"rgba(0,242,195,0.1)\";\n    tick =\"#9e9e9e\";\n  } else if (color === \"pink\") {\n    line_color = \"rgba(225,78,202,0.1)\";\n    tick = \"#9e9e9e\";\n  } else{\n    line_color = \"rgba(29,140,248,0.1)\";\n    tick = \"#9a9a9a\";\n  }\n  var new_options = JSON.parse(JSON.stringify(base_options))\n  new_options[\"scales\"][\"xAxes\"][0][\"gridLines\"][\"color\"] = line_color;\n  new_options[\"scales\"][\"yAxes\"][0][\"ticks\"][\"fontColor\"] = tick;\n\n  if (type === \"line\"){\n    new_options[\"scales\"][\"xAxes\"][0][\"barPercentage\"] = 1.6\n    new_options[\"scales\"][\"yAxes\"][0][\"barPercentage\"] = 1.6\n    new_options[\"scales\"][\"yAxes\"][0][\"gridLines\"][\"color\"] = \"rgba(29,140,248,0.0)\";\n  }\n  else if (type === \"bar\"){\n    new_options[\"scales\"][\"yAxes\"][0][\"gridLines\"][\"color\"] = line_color;\n  }\n\n  return new_options\n}\n","export function DataWrapper(dataX, dataY, color) {\n  let line_color = null;\n  let border_color = null;\n  if (color === \"green\") {\n    line_color = \"rgba(0,242,195\";\n    border_color = \"#00d6b4\"\n  } else if (color === \"pink\") {\n    line_color = \"rgba(225,78,202\";\n    border_color = \"#d048b6\"\n  } else{\n    line_color = \"rgba(29,140,248\";\n    border_color = \"#1f8ef1\"\n  }\n\n\n  let data_fn =  canvas => {\n    let ctx = canvas.getContext(\"2d\");\n\n    let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\n      gradientStroke.addColorStop(1, line_color + \",0.2)\"); // this changes\n      gradientStroke.addColorStop(0.4, line_color + \",0.0)\"); // this changes\n      gradientStroke.addColorStop(0, line_color + \",0)\"); //this changes\n\n    return {\n      labels: dataX,\n      datasets: [\n        {\n          borderColor: border_color,\n          pointRadius: 1,\n          lineTension: 0,\n          data: dataY,\n          fill: false,\n          // showLine: false,\n          minRotation: 10,\n          maxRotation: 10\n        }\n      ]\n    };\n  }\n\n  return data_fn\n}\n\n\n\n\nexport function DoubleDataWrapper(dataX, dataY, dataCali, color, county) {\n  let line_color = null;\n  let border_color = null;\n  if (color === \"green\") {\n    line_color = \"rgba(0,242,195\";\n    border_color = \"#00d6b4\"\n  } else if (color === \"pink\") {\n    line_color = \"rgba(225,78,202\";\n    border_color = \"#d048b6\"\n  } else{\n    line_color = \"rgba(29,140,248\";\n    border_color = \"#1f8ef1\"\n  }\n\n\n  let data_fn =  canvas => {\n    let ctx = canvas.getContext(\"2d\");\n\n    let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\n      gradientStroke.addColorStop(1, line_color + \",0.2)\"); // this changes\n      gradientStroke.addColorStop(0.4, line_color + \",0.0)\"); // this changes\n      gradientStroke.addColorStop(0, line_color + \",0)\"); //this changes\n\n    let gradientStrokeCali = ctx.createLinearGradient(0, 230, 0, 50);\n      gradientStroke.addColorStop(1, \"rgba(255,255,0,0.2)\"); // this changes\n      gradientStroke.addColorStop(0.4, \"rgba(255,255,0,0.0)\"); // this changes\n      gradientStroke.addColorStop(0, \"rgba(255,255,0,0)\"); //this changes\n\n    return {\n      labels: dataX,\n      datasets: [\n        {\n          label: county,\n          fill: true,\n          backgroundColor: gradientStrokeCali,\n          borderColor: border_color,\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          data: dataY\n        },\n        {\n          label: \"California\",\n          fill: true,\n          backgroundColor: gradientStrokeCali,\n          borderColor: \"#FFFF00\",\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          data: dataCali\n        },\n      ]\n    };\n  }\n\n  return data_fn\n}\n","import React from 'react';\nimport { Line, Bar } from \"react-chartjs-2\";\nimport {\n  CardBody,\n} from \"reactstrap\";\n\nimport {GetGraphOptions} from \"./charts_options.jsx\"\nimport {DataWrapper, DoubleDataWrapper} from \"./charts_data.jsx\";\n\n// This should take in data\n\n\n// Options that can be configured (data,color, size, icon, multiple toggles (todo))\n\n// Classic Line Graph\n// Parameters: dataX, dataY, color (blue, green, pink), size (1-12)(n), title(n), (n)ylabel (took out size and labels to work with aneesh better)\nclass LineChart extends React.Component {\n  render() {\n    return(\n      <CardBody>\n        <div className=\"chart-area\">\n          <Line\n            data={DataWrapper(this.props.dataX, this.props.dataY, this.props.color)}\n            options={GetGraphOptions(\"line\", this.props.color )}\n          />\n        </div>\n      </CardBody>\n    )\n  }\n}\n\n\n\n// Bar Graph Component\nclass BarChart extends React.Component {\n  render() {\n\n    return(\n      <CardBody>\n        <div className=\"chart-area\">\n          <Bar\n            data={DataWrapper(this.props.dataX, this.props.dataY, this.props.color)}\n            options={GetGraphOptions(\"bar\", this.props.color )}\n          />\n        </div>\n      </CardBody>\n\n    )\n  }\n}\n\n\nclass DoubleBarChart extends React.Component {\n  render() {\n\n    return(\n      <CardBody>\n        <div className=\"chart-area\">\n          <Bar\n            data={DoubleDataWrapper(this.props.dataX, this.props.dataY, this.props.dataCali, this.props.color, this.props.county)}\n            options={GetGraphOptions(\"bar\", this.props.color )}\n          />\n        </div>\n      </CardBody>\n    )\n  }\n}\n\n\n\n// Pie Chart Component\nexport {\n  LineChart,\n  BarChart,\n  DoubleBarChart,\n}\n","import config from './config';\n\nexport async function getSensorData(count){\n  let options = {\n        method: 'GET',\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n      \n      // var url = new URL('/sensors')\n      // var params = { count }\n      // url.search = new URLSearchParams(params).toString();\n      // console.log(url);\n      let resp = await fetch('/sensors?count=1', options);\n      let json =  await resp.json();\n      return json\n}\n","import React from 'react';\nimport { randomUniform } from 'd3-random';\n\nimport { LineChart } from \"../ChartsComponents/ChartsWrapper.js\"\nimport { getSensorData } from '../api.js';\n\n// reactstrap components\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  Row,\n  Col,\n} from \"reactstrap\";\n\nconst MAX_SAMPLES = 500\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      last: 0,\n      pressureX: [],\n      pressureY: [],\n      flowX: [],\n      flowY: [],\n      volumeX: [],\n      volumeY: []\n    };\n\n    setInterval(() => {\n      this.getSensor()\n    }, 100);\n  }\n\n  componentDidMount() {\n  }\n\n  componentDidUpdate(){\n  }\n\n  async getSensor() {\n    const resp = await getSensorData(1)\n\n    let flowX = this.state.flowX.slice()\n    let flowY = this.state.flowY.slice()\n\n    let volumeX = this.state.volumeX.slice()\n    let volumeY = this.state.volumeY.slice()\n\n    let pressureX = this.state.pressureX.slice()\n    let pressureY = this.state.pressureY.slice()\n\n    for (let i=0; i<resp.samples; i++) {\n      if (resp.times[i] > this.state.last) {\n        flowX.push(resp.times[i])\n        flowY.push(resp.humidity[i])\n        volumeX.push(resp.times[i])\n        volumeY.push(resp.temperature[i])\n        pressureX.push(resp.times[i])\n        pressureY.push(resp.pressure[i])\n\n        if (resp.times[i] > this.state.last) this.setState({ last: resp.times[i] })\n      }\n    }\n    \n\n    // adjust all arr\n    this.adjustArray(flowX, MAX_SAMPLES)\n    this.adjustArray(flowY, MAX_SAMPLES)\n    this.adjustArray(volumeX, MAX_SAMPLES)\n    this.adjustArray(volumeY, MAX_SAMPLES)\n    this.adjustArray(pressureX, MAX_SAMPLES)\n    this.adjustArray(pressureY, MAX_SAMPLES)\n\n    // update state (and graphs)\n    this.updateFlow(flowX, flowY)\n    this.updateVolume(volumeX, volumeY)\n    this.updatePressure(pressureX, pressureY)\n  }\n\n  adjustArray(arr, count) {\n    for (let i = arr.length; i > count; i--) {\n      arr.shift();\n    }\n  }\n\n  async updateFlow(flowX, flowY) {\n    this.setState({ flowX });\n    this.setState({ flowY });\n  }\n\n  async updateVolume(volumeX, volumeY) {\n    this.setState({ volumeX });\n    this.setState({ volumeY });\n  }\n\n  async updatePressure(pressureX,  pressureY) {\n    this.setState({ pressureX });\n    this.setState({ pressureY });\n  }\n\n  getdata() {\n    const x = []\n    const y = []\n    for (var i = 0; i < 20; i++) {\n      const yVal = randomUniform(-50,50)()\n      x.push(i)\n      y.push(yVal)\n    }\n    this.setState({\n      flowX: x,\n      flowY: y,\n      pressureX: x,\n      pressureY: y,\n      volumeX: x,\n      volumeY: y\n    })\n  }\n\n  getd() {\n    const yVal = randomUniform(-50,50)()\n    var flowX = this.state.flowX.slice();\n    flowX.splice(0, 1)\n    flowX.push(flowX[flowX.length - 1] + 1)\n    this.setState({ flowX });\n\n    var flowY = this.state.flowY.slice();\n    flowY.splice(0, 1)\n    flowY.push(yVal)\n    this.setState({ flowY });\n  }\n\n  render() {\n    return (\n        <div className=\"content\">\n          <Row>\n          <Col xs=\"7\">\n            <h3>BW 60kg</h3>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"7\">\n              <Card className=\"card-chart\">\n                <CardHeader>\n                  <Row>\n                    <Col className=\"text-left\" sm=\"6\">\n                      <CardTitle tag=\"h3\">Pressure  </CardTitle>\n                    </Col>\n                  </Row>\n                </CardHeader>\n                <CardBody>\n                  <div className=\"chart-area\">\n                    <LineChart\n                      dataX={this.state.pressureX}\n                      dataY={this.state.pressureY}\n                    />\n                  </div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"7\">\n              <Card className=\"card-chart\">\n                <CardHeader>\n                  <h5 className=\"card-category\"></h5>\n                  <CardTitle tag=\"h3\">\n                    Flow\n                  </CardTitle>\n                </CardHeader>\n                <LineChart color=\"green\" dataX={this.state.flowX} dataY={this.state.flowY} />\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"7\">\n              <Card className=\"card-chart\">\n                <CardHeader>\n                  <h5 className=\"card-category\"></h5>\n                  <CardTitle tag=\"h3\">\n                    Volume\n                  </CardTitle>\n                </CardHeader>\n                <LineChart color=\"pink\" dataX={this.state.volumeX} dataY={this.state.volumeY}/>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from './routes';\n\nimport \"./assets/scss/black-dashboard-react.scss\";\nimport \"./assets/css/nucleo-icons.css\";\n\nReactDOM.render(\n            <div>\n                <Routes />\n            </div>\n    , document.getElementById('root')\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React from 'react';\nimport { Switch, Route, BrowserRouter} from 'react-router-dom';\n\n/* Component Imports */\n// import DashboardView from './DashboardView/DashboardView';\n\n// copied from template\nimport Dashboard from \"./views/Dashboard.jsx\";\n\nvar routes = [\n  {\n    path: \"/workspace\",\n    name: \"Your Workspace\",\n    icon: \"tim-icons icon-chart-pie-36\",\n    component: Dashboard,\n    layout: \"/admin\"\n  }\n];\n\nexport { routes };\n\nexport default () => (\n  <BrowserRouter>\n    <Switch>\n      {/* <Route path=\"/dashboard\" component={DashboardView} /> */}\n      {/* this needs to be last */}\n      <Route path=\"*\" component={Dashboard} />\n    </Switch>\n  </BrowserRouter>\n);\n"],"sourceRoot":""}